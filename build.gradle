plugins {
	id 'org.springframework.boot' version '2.2.1.RELEASE'
	id 'io.spring.dependency-management' version '1.0.8.RELEASE'
	id 'java'
	id 'war'
}

group = 'ru.starokozhev'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	//implementation 'org.springframework.boot:spring-boot-starter-log4j2'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'io.jsonwebtoken:jjwt:0.9.0'
	//compile 'org.liquibase:liquibase-core'
	//compile 'org.hibernate:hibernate-java8'
	//compile 'org.hibernate:hibernate-validator'
	//compile 'org.hibernate:hibernate-envers'

	compile group: 'com.squareup.okhttp3', name: 'okhttp', version: '4.2.2'


	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	//runtimeOnly 'com.h2database:h2'
	runtimeOnly 'org.postgresql:postgresql'
	implementation 'org.apache.httpcomponents:httpclient'
	implementation 'commons-codec:commons-codec:1.11'
	implementation 'org.json:json:20160212'
	implementation 'io.springfox:springfox-swagger2:2.8.0'
	implementation 'io.springfox:springfox-swagger-ui:2.8.0'
	implementation 'io.swagger:swagger-annotations:1.5.14'
	implementation 'com.github.javafaker:javafaker:0.13'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

test {
	useJUnitPlatform()
}

task cleanDatabase(type: Delete) {
	doFirst {
		delete 'database.mv.db'
		delete 'database.trace.db'
	}
}

tasks.clean.dependsOn cleanDatabase

task frontendInstall(type: Exec) {
	group = 'frontend'
	doFirst {
		workingDir 'frontend'
		commandLine = ['npm', 'ci']
	}
}


task frontendBuild(type: Exec) {
	group 'frontend'
	doFirst {
		workingDir 'frontend'
		commandLine = ['npm', 'run', 'build']
	}
}

task frontendClear(type: Delete) {
	group = 'frontend'
	doFirst {
		delete 'src/main/resources/frontend'
	}
}

task frontendClearCache(type: Delete) {
	group = 'frontend'
	doFirst {
		delete 'frontend/node_modules'
	}
}

def webappDir = "$projectDir/frontend"
sourceSets {
	main {
		resources {
			srcDirs = ["$webappDir/dist", "$projectDir/src/main/resources"]
		}
	}
}
